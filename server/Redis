Redis笔记

#什么是 Redis（Remote Dictionary Server）
- 可基于内存亦可持久化的日志型、Key-Value数据库；并且提供一系列模式来支持 数据硬盘持久化，数据操作事务恢复
- 一切操作都是针对 Key 进行的，由 Key 对应到不同的数据结构，提供不同的特性和接口；Key 为一般字符串，不支持 空格、'\n' 符号
- 被称为数据结构服务器，其（value）可以是 字符串(String)，哈希(Hashes)，链表(list)，集合(sets)，有序集合(sorted sets)；不过最终数据都是保存为 String 形式

# 一个 Redis 实例可以包含多个 DB 库，库名为整数索引，默认为 0（可配置）；不同库则数据完全隔离，Key 不会在库之间冲突
- 通过 select index 可以切换到不同库
- flushdb 指令只清空当前库，flushall 清空所有库
- keys * 可以查看 Redis 当前库中所有 Key，不过不要在生产环境中使用...

# 基本操作
- 连接：redis-cli.exe -h IP -p 6379（指定 host 和 port，默认为 本机 6379 端口）
- 关闭：连接后， shutdown 直接关闭

# 哈希(Hashes) 数据结构
- HSET KEY_NAME FIELD VALUE：KEY_NAME 在这里指的是数据结构在 Redis 里面的 Key；FIELD-VALUE 才是这个 Hash 数据结构中的 K-V 对；整个操作是为 KEY_NAME 指向的这一 hash表 设定一个 K-V 对
- HGET KEY_NAME FIELD：获取 KEY_NAME 指向的 hash表 的 K（FIELD）对应的值
- HGETALL KEY_NAME：获取 KEY_NAME 指向的 hash表 的 所有 K-V 对（也就是拿到整个 Map）
- HEXISTS KEY_NAME FIELD：验证 KEY_NAME 指向的 hash表 是否存在 某个K（FIELD）
- HLEN KEY_NAME：获取 KEY_NAME 指向的 hash表 的大小 

# 链表（list）数据结构
- RPUSH KEY_NAME VALUE：KEY_NAME 指向的链表，表尾入栈 VALUE
- LPOP KEY_NAME：KEY_NAME 指向的链表，表头出栈并返回
- LLEN 获取链表长度

# 集合（set）数据结构
- SMEMBERS：获取集合中所有元素（不会删除）
- SADD：向集合加入一个成员
- SPOP：集合中随机移除一个成员并返回
- SCARD：返回集合中元素数量



