## 1. 计算机基础
### 1.1 冯诺依曼计算机

- 计算机由五大部件组成：运算器、控制器、存储器、输入设备、输出设备
- 指令（包含操作码和地址码）和数据以同等地位存在于存储器（都以二进制表示），可按地址访问
- 计算机以运算器为中心

### 1.2 现代计算机

- 依然由五大部件组成，但重新划分成：
	- 主机：CPU（运算器 + 控制器） + 主存（即内存）
	- 存储器：主存 + 辅存（即硬盘）
	- I/O设备（例如键鼠/显示器）
- 计算机以存储器为中心（I/O先进入存储，再和CPU进行交互处理）

### 1.3 计算机系统Flynn分类方法

- 指令流：指机器执行的指令序列
- 数据流：指由指令流调用的数据序列，包括输入数据和中间数据，不包括输出数据

该标准下计算机系统结构分类：

- 单指令流单数据流 SISD-Single Instruction stream and Single Data stream：传统的顺序执行单处理计算机，其指令部件每次支队一条指令进行译码，并且只对一个操作部件分配数据
- 单指令流多数据流 SIMD：以并行处理机（矩阵处理机）为代表,包括多个重复的处理单元，由单一指令部件控制，按同一指令流要求为他们分配不同数据。
- 多指令流单数据流 MISD：这类系统很少见。
- 多指令流多数据流 MIMD：实现作业、任务、指令等各级全面并行的多机系统。如多核处理器、多处理机。

### 1.4 指令系统

#### 1.4.1 复杂指令系统 CISC-Complex Instruction Set Computer

- 指令数量多，通常100-250条；且使用频率悬殊，80%情况下只使用20%的指令
- 指令寻址方式多，通常5-20种
- 指令长度不定，增加译码电路复杂性
- 以微程序控制为主，指令系统复杂，难以通过电路实现控制器，通常采用微程序控制
- 指令可直接和内存交互

#### 1.4.2 精简指令系统 RISC-Reduced Instruction Set Computing

- 指令数量少，优先选用了一些使用频率高的指令；使用频率接近
- 指令寻址方式少
- 指令长度固定、格式种类少，译码相对容易
- 以硬布线逻辑控制为主，通常采用硬布线逻辑构建控制器
- 只有Load/Store操作内存，主要和寄存器交互；CPU中通用寄存器数量多，一般在32个以上，有的可达上千个

- 单周期指令执行，采用流水线技术；简化的指令系统更容易利用流水线技术
- 优化的编译器，指令数量少且寻址方式少、长度固定、格式少使得编译工作易于优化


## 2. CPU-Central Processing Unit 中央处理器
计算机核心部件，内部包含运算器、控制器以及一些缓存存储。

### 2.1 Arithmetic and Logic Unit 运算器
ALU 是运算执行中心。

- ALU-Arithmetic and Logic Unit 算数逻辑单元，执行算逻运算
- ACC/AC-Accumulator 累加寄存器，辅助算逻运算，为ALU提供工作区，用来暂存操作数或运算结果
- X/MQ 其他寄存器，辅助算逻运算
- PSW-Program Status Word 状态字寄存器，存状态标志与控制标志（例如溢出/中断）

### 2.2 Control Unit 控制器
CU 是控制执行核心，其被 “时序部件” 驱动，整个CPU的时钟，各部件之间的协同都以来时序部件。

- CU-Control Unit 控制单元
- 时序部件 提供时序控制信号
- PC-Program Counter Register 程序计数器，存储下一条指令所在内存单元地址（指令以顺序存放在内存中）
- IR-Instruction Register 指令寄存器，存储即将执行的指令（包含 操作码Operation + 地址Address）
- ID-Instruction Decoder 指令译码器，对指令中的操作码字段进行分析和解释

### 2.3 CPU存储
这部分用于协调CPU和Memory内存的速度差异，提升效率。

- MAR/AR-Memory Address Register 地址寄存器，将内容传入Address Bus（地址总线），可归入 控制器
- MDR/DR-Memory Data Register 数据寄存器，获取Data Bus（数据总线）内容，可归入 运算器

### 2.4 一条指令执行步骤

- 取指：PC->AR->M(Memory)->DR->IR
- 分析：OP->ID->CU
- 执行：IR->AR->M(Memory)->DR->ACC

## 3. 存储
### 3.1 主存
都是二进制bit存储，8位称为byte字节。内存地址为了简洁常用16进制表示（前缀 '0x' 或 后缀 'H'）。

内存总线：

- Adress Bus（地址总线）：用于内存寻址，地址总线的位数n取决于内存地址的范围，例如n=8最多编码256个地址
- Data Bus（数据总线）：用于内存取数，内存一次处理的位数n即为数据总线长度，又称为一个字的长度；计算机常见32位/64位

内存地址计算技巧：

- 两个内存地址a、b之间的编码的数据量=(b+1-a)*内存芯片字长（例如8bits/32bits的芯片）
- 16进制 和 2进制 要能快速转化，非常简单：每“1位16进制”独立对其相应的“4位2进制”
- 需要清晰记忆2进制相关指数，例如2^8=256、2^10=1024，这能快速解出 KB/MB/GB/TB/PB 数据转化
- 指数计算规则：2^a*2^b=2^(a+b)、(2^a)^b=2^(a*b)

### 3.2 存储器分类

- 按照所处位置
	- 内存（主存）：CPU当前使用的指令和数据
	- 外存（辅存）：存放后备程序和数据

- 按照构成材料
	- 半导体存储器：静态存储器（双稳态触发器）、动态存储器（电容电荷，内存使用）
	- 磁存储器：利用磁性材料两种不同状态长期存储（外存使用）
	- 光存储器：利用光斑、晶像的变化（外存使用）

- 按照工作方式：RAM-Random Access Memory 读/写存储器、ROM-Read Only Memory 只读存储器
- 按照访问方式：按地址访问、按内容访问
- 按照寻址方式：RAM 随机存储器（内存、U盘）、SAM-Sequentially Accessible Memory 顺序存储器（磁带）、DAM-Direct Access Memory 直接存储器（磁盘、光盘）、Cache/CAM-Contents addressable Memory 相连存储器（CPU、路由器使用）

常见存储器大概4层：寄存器、Cache、主存、磁盘；容量从小到大，速度从快到慢，价格从高到低。

### 3.3 磁盘存储器
存储容量=n*t*s*b
n=保存数据的总记录面数（注意每1个盘有上下2个面）
t=每个面的磁道数
s=每个磁道的扇区数
b=每个扇区的存储字节数

硬盘存取时间=寻道时间+等待时间（等待扇区转到磁头 + “扇区被磁头扫描一遍！”）+读/写时间（这块通常忽略不计）

磁盘柱面：所有盘面的某号整体组成一个柱面
磁盘调度：先进行移臂调度（常见最短移臂调度算法，属于贪心算法），再进行旋转调度

### 3.4 磁盘阵列
通过小磁盘形成阵列，并发处理数据，提升磁盘整体存取性能。并且可以附加一些冗余、校验能力，另外还能降低成本。

- RAID 0 无冗余和无校验的数据分块：代表了所有RAID中最高的存储性能。把连续的数据分散到多个磁盘上存取。磁盘空间利用率100%
- RAID 1 磁盘镜像阵列：将数据完全一致地分别写到工作磁盘和镜像磁盘。磁盘空间利用率50%
- RAID 2 采用海明码纠错：需增加3个校验盘来存储校验信息，实现单纠错和双验错功能。实际用的很少。
- RAID 3/4 采用奇偶校验码：需增加1个校验盘，如果有1个盘失效，可通过其他盘恢复数据。数据读取快但是写入慢（计算校验位）。RAID 3使用位交叉奇偶数校验，RAID 4使用块交叉奇偶数校验（更适合大文件读取）。
- RAID 5 无独立校验盘的奇偶校验：校验信息分布在所有磁盘上（实际上还是会消耗1个盘大小的空间做校验），适用于I/O频繁的应用。
- RAID 6 在5的基础上再增加一层分布式校验，总体会消耗2个盘大小的空间做校验。
- RAID 7 最优化的异步高I/O速率和高传输速率，可以理解为独立的存储计算机。
- RAID 10 最可靠与高性能，表达的是 RAID 1（冗余备份） + RAID 0（数据读写），RAID 10性价比较高。


## 4. Cache 高速缓冲存储器
用于解决CPU和主存（即内存）之间的速度差异，避免CPU“空等”现象。Cache速度高于主存，容量小于主存。

Cache 局部性原理：

- 时间局部性：缓存经常使用的内容（例如for循环对某些内容持续读取）
- 空间局部性：缓存目标内容相邻空间的内容

### 4.1 Cache & CPU & Memory 交互模式
CPU寻址传入地址总线->Memory地址（块号+块内地址）->“主存Cache地址映射变换机构”

- 若Cache命中，则直接访问“Cache存储体”输出结果到地址总线
- 若Cache未命中，则继续判断Cache是否有空间直接装入
	- 若Cache有空间，则访问主存装入Cache，然后输出结果
	- 若Cache无空间，则通过“Cache替换机构”访问主存替换掉（通过算法）之前某些缓存，然后输出结果

### 4.2 Cache 映像方法（主存内容Cache细节）

距离CPU较近：使用直接映像或组相连映像
距离CPU较远：使用全相联映像

#### 直接映像
主存结构区分为n个“区”（大小、页数都一致），每个区分为m个“页”，例如0-127区，每个区15页。
Cache作为1个“区”（大小、页数都一致），各个分页直接映射对应到主存中任意区的相应分页（例如Cahce的第0页对应主存任意区的第0页）。
优点：地址变换简单
缺点：是不灵活、块冲突率高

#### 全相联映像
把主存看作一个区，整体区分为m个页，例如0-2047页。
Cache在页级别上进行缓存。
优点：位置不受限制，非常灵活
缺点：地址变换复杂，速度比较慢

#### 组相联映像
主存结构区分为n个“区”，每个区分为m个“组”，每个组分为k个“页”
Cache作为1个“区”，各个分组直接对应到主存中任意区的相应分组（直接映像法）；组内的具体分页灵活映射（全相连映像）。

### 4.3 Cache 性能
Cache平均访问时间：ta=Hc*tc+(1-Hc)*tm，Hc为Cache访问命中率，tc为Cache访问时间，tm为Memory访问时间。

### 4.4 Cache 写策略

- 写回法 write-back：只修改Cache不立即写入主存，等待Cache相应数据被换出时才写主存。效率高，本质上是对写操作也做了缓冲。
- 写直达法 write-through：又称全写法/写透法。Cache和主存同时写修改。效率低。
- 标记法：对进入Cache的数据维持有效标记‘1’，当数据被CPU修改时，标记置为‘0’（失效）并且只写入主存。

### 4.5 缓存替换算法

- 随机算法：直接随机替换。
- 先进先出 FIFO-First In First Out：最先进入的数据先替换；系统开销小，但有可能会把一些经常重复使用的数据替换掉。
- 最近最少使用 LRU-Least Recently Used（时间计数）：最近最少使用的数据先替换；需要记录各个数据块使用情况，系统开销相对大；不过比较合理。
- 最不经常使用页置换 LFU-Least Frequently Used（全局频次计数+时间计数）：全局最不经常使用的数据先替换（还会配合定时衰减计数，将长期不活跃的数据清理掉），系统开销更大；不过从整体考虑更合理。


## 5. 校验码
信息保存在电容中，可能因为电磁环境干扰而出错。所以希望设计效验码来发现、纠正错误。

码距：按二进制后的位数进行比较，差异位数的总数即为码距；例如“100”和“000”码距=2
编码系统的码距：整个编码系统中任意两个码字的最小距离
校验码基础要求（增加码距，通过冗余信息进行校验）：

- 一个码组内为了检测e个误码，要求最小码距 d>=e+1
- 有个码组内为了纠正t个误码，要求最小码距 d>=2t+1
- 同时纠错检错：d>=e+t+1

### 5.1 奇偶校验码
方案：为信息位数串增加一个冗余位（放前缀或后缀）
	
	- 偶校验：保证整个串中‘1’出现次数为偶数
	- 奇校验：保证整个串中‘1’出现次数为奇数

优点：只增加一位冗余
缺陷：只能发现奇数个位出错的情况，偶数个位发现不了（本质上还是冗余信息没加够）

### 5.2 海明码
方案：基础是奇偶校验+分组校验，假设数据位n位，校验位k位，整体数据长度为n+k位，详细方案如下：

- 校验位设置在2^n（“从0开始”）的位置上，信息码对应地放在非2^n的位置上；注意从左到右排列（即n=0/1对应的第1、2位都是校验位，处于最终输出串的前缀，信息码的最高位应放置第3位）
- 校验位的校验结果，本身就是错误的具体位置（这个和海明码分组有关，非常巧妙）
- 要求“2^k>=n+k+1”，因为校验结果能表达的错误范围最大是2^k-1
- 分组方式是：第一组XXX1、第二组XX1X、第三组X1XX、等等；每个组相应二进制位数上为‘1’，分组包含冗余

### 5.3 循环冗余校验码
构造步骤：

- 化解多项式：将基于变量x的多项式转为一个二进制串，以最高次作‘1’起头，用‘0’补全空项（x^4+x+1=2^4+2^1+2^0=10011）
- 对信息码加0作模2除法取余数：增加多项式最高次方个‘0’在信息码结尾（x^4+x+1->4个0），模2除法取余数就是异或运算
- 余数即校验码，直接添加到信息码后缀（正好替换到上个步骤中添加的‘0’占位）


## 6. 其他

### 6.1 指令
指令周期：取出（解释）并执行一条指令所需的全部时间。一个指令周期可以分为：取指周期、分析周期、执行周期

#### 指令的执行方式：

- 顺序方式：各条机器指令之间顺序串行执行，执行完一条指令才取下一条指令。缺点是速度慢，机器各部件利用效率低。
- 重叠方式（部分并行）：在解释第K条指令的操作完成前开始解释第K+1条
- 流水方式（完全并行）：指令步骤（取指、分析、执行）的并行、提高处理器执行指令的效率（各部件同时并行）。借鉴了工业流水线设计思想。

#### 流水线
流水线建立时间（磨合期）：第一条指令执行完毕的时间
流水线周期：取指/分析/执行 中耗时最长的一段

流水线中n条指令的执行时间：

- 理论公式：流水线建立时间+(n-1)*流水线周期
- 实践简化公式：流水线包含阶段k*流水线周期+(n-1)*流水线周期=(n+k-1)*delta

关键概念：

- 流水线吞吐率：TP-Throughput=指令条数/执行时间
- 流水线最大吞吐率：1/delta t=1/流水线周期
- 流水线加速比：S=不使用流水线执行时间/使用流水线执行时间


### 6.2 总线
总线是一组能为多个部件分时共享的公共信息传送线路。

#### 总线分类

- 按照相对CPU或其他芯片位置分为：内部总线、外部总线
- 按照功能划分为：地址总线（传送地址信息）、数据总线（传送数据信息）、控制总线（传送控制信号）
- 按照总线中数据线的多少：并行总线、串行总线
	- 并行总线：多条双向数据线，“有传输延迟”适合近距离连接，应用于系统总线（计算机内各个部件）
	- 串行总线：一条双向数据线（或两条单向数据线），“速率慢”但适合长距离连接，应用于通信总线（计算机之间、计算机与其他系统之间）

#### 总线工作方式

- 单工：发送端->接收端 单向传递数据（收音机）
- 半双工：发送端、接收端可以互换，都能发送、接收数据，需要交替进行（对讲机）
- 全双工：可以同时进行发送、接收数据（手机）


